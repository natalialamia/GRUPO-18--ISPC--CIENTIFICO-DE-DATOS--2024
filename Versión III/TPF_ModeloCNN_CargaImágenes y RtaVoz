{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1717957537201,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"},"user_tz":180},"id":"rVomi3VaoeJy","outputId":"71a4794a-8ad4-4a71-8345-5ace6910c764"},"outputs":[{"output_type":"stream","name":"stdout","text":["Failed to load (likely expired) https://storage.googleapis.com/kaggle-data-sets/111880/269359/bundle/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20240602%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240602T202631Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=4f332d0fb3ca065027acca0dfe4b89ce077bf569d7c62d4d61c94aa9c74d50cf95cd3ed9c4c39b3c439852afdfcd0113f67f9db54f9ce449dddbd33648272bee38c3425f043c86dc547cbff27b6e284abcf1825dba293ef27b10807ed74c3cf727a0a7ce4507fc73a97e756d9ba7d8c0241eeaa59e629ec3c13a2348c7d75d6527432a4b3f4f83449b33814565207bade8b4960ee4a6b2a0863570a5ee38e73171ee2b0f51753f3100fddd56c92f0a8d3e437ca7899bff73501a5eb09a940791a528bdc225b53d6efda312da31823dc9bbc51d88fc3fb0d5799b2ea1bba59d5fb4e39431e82f1b9d8e818be30e4866b8e32e29c8d5eb8c79cb90e7997dad0747 to path /kaggle/input/intel-image-classification\n","Data source import complete.\n"]}],"source":["\n","# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES\n","# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","\n","import os\n","import sys\n","from tempfile import NamedTemporaryFile\n","from urllib.request import urlopen\n","from urllib.parse import unquote, urlparse\n","from urllib.error import HTTPError\n","from zipfile import ZipFile\n","import tarfile\n","import shutil\n","\n","CHUNK_SIZE = 40960\n","DATA_SOURCE_MAPPING = 'intel-image-classification:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F111880%2F269359%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240602%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240602T202631Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D4f332d0fb3ca065027acca0dfe4b89ce077bf569d7c62d4d61c94aa9c74d50cf95cd3ed9c4c39b3c439852afdfcd0113f67f9db54f9ce449dddbd33648272bee38c3425f043c86dc547cbff27b6e284abcf1825dba293ef27b10807ed74c3cf727a0a7ce4507fc73a97e756d9ba7d8c0241eeaa59e629ec3c13a2348c7d75d6527432a4b3f4f83449b33814565207bade8b4960ee4a6b2a0863570a5ee38e73171ee2b0f51753f3100fddd56c92f0a8d3e437ca7899bff73501a5eb09a940791a528bdc225b53d6efda312da31823dc9bbc51d88fc3fb0d5799b2ea1bba59d5fb4e39431e82f1b9d8e818be30e4866b8e32e29c8d5eb8c79cb90e7997dad0747'\n","\n","KAGGLE_INPUT_PATH='/kaggle/input'\n","KAGGLE_WORKING_PATH='/kaggle/working'\n","KAGGLE_SYMLINK='kaggle'\n","\n","!umount /kaggle/input/ 2> /dev/null\n","shutil.rmtree('/kaggle/input', ignore_errors=True)\n","os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)\n","os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)\n","\n","try:\n","  os.symlink(KAGGLE_INPUT_PATH, os.path.join(\"..\", 'input'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","try:\n","  os.symlink(KAGGLE_WORKING_PATH, os.path.join(\"..\", 'working'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","\n","for data_source_mapping in DATA_SOURCE_MAPPING.split(','):\n","    directory, download_url_encoded = data_source_mapping.split(':')\n","    download_url = unquote(download_url_encoded)\n","    filename = urlparse(download_url).path\n","    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)\n","    try:\n","        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:\n","            total_length = fileres.headers['content-length']\n","            print(f'Downloading {directory}, {total_length} bytes compressed')\n","            dl = 0\n","            data = fileres.read(CHUNK_SIZE)\n","            while len(data) > 0:\n","                dl += len(data)\n","                tfile.write(data)\n","                done = int(50 * dl / int(total_length))\n","                sys.stdout.write(f\"\\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded\")\n","                sys.stdout.flush()\n","                data = fileres.read(CHUNK_SIZE)\n","            if filename.endswith('.zip'):\n","              with ZipFile(tfile) as zfile:\n","                zfile.extractall(destination_path)\n","            else:\n","              with tarfile.open(tfile.name) as tarfile:\n","                tarfile.extractall(destination_path)\n","            print(f'\\nDownloaded and uncompressed: {directory}')\n","    except HTTPError as e:\n","        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')\n","        continue\n","    except OSError as e:\n","        print(f'Failed to load {download_url} to path {destination_path}')\n","        continue\n","\n","print('Data source import complete.')\n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28440,"status":"ok","timestamp":1717957571683,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"},"user_tz":180},"id":"Te-u8k8MUyv0","outputId":"02fc7d0b-386a-407c-ce34-2e9a62aca312"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"L248uxhQqjtW"},"source":["# **INSTITUTO SUPERIOR POLITÉCNICO CÓRDOBA**\n","\n","# **Módulo Científico de Datos**\n","### **TPF: Clasificación de Imágenes utilizando Redes Neuronales Convulcionales**\n","\n"," ### **Grupo 18:**\n","           Viviana Farabollini\n","           Mariano Ledezma\n","           Natalia Lamia\n","\n"]},{"cell_type":"markdown","metadata":{"id":"MU_bxoMHqsNq"},"source":["\n","Para realizar el presente trabajo utilizamos el dataset proporcionado por \"Kaggle Intel Image Classification\" del siguiente link: https://www.kaggle.com/puneet6060/intel-image-classification/data\n","\n","\n","El mismo posee 3 carpetas las cuales contienen:\n","\n","1. Carpeta de entrenamiento:\n","    + 6 carpetas con las imagenes para entrenar.\n","2. Carpeta de test:\n","    + 6 carpetas con las imagenes para testear.\n","3. Carpeta de predicción:\n","    + Imagenes para que el modelo prediga su clasificación.\n","    \n","## **Objetivo:**\n","\n","* Desarrollar y entrenar un modelo de Red Neuronal Convolucional (CNN) para clasificar y predecir imágenes organizadas en una estructura grid, con el objetivo de facilitar la futura construcción de una aplicación para una agencia de turismo.\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"gSdYmlmlQq7G"},"source":["#**Importación de librerías**"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"tWs2ya5kVFAn","executionInfo":{"status":"ok","timestamp":1717957582448,"user_tz":180,"elapsed":4229,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"}}},"outputs":[],"source":["# Procedemos a importar las librerias necesarias para desarrollar el proyecto.\n","\n","import numpy as np\n","import os\n","from tensorflow.keras import Sequential\n","from sklearn.metrics import confusion_matrix\n","from tensorflow.keras.layers import Conv2D, MaxPool2D, Dropout, Dense, Flatten, Reshape, Conv2DTranspose, UpSampling2D, Input,MaxPooling2D\n","from tensorflow.keras import Model\n","import seaborn as sn\n","from tensorflow.keras.optimizers import SGD\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","from keras.preprocessing.image import ImageDataGenerator\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","metadata":{"id":"XeaCihe3Q1KF"},"source":["# **Carpeta contenedora del DATASET**"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":671,"status":"ok","timestamp":1717957591431,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"},"user_tz":180},"id":"aVnIFHgRVyJ2","outputId":"2e4f58f7-83bd-4de9-a69e-09ea332b9984"},"outputs":[{"output_type":"stream","name":"stdout","text":["[Errno 2] No such file or directory: '/kaggle/input/intel-image-classification'\n","/content\n"]}],"source":["# Nos desplazamos por el Drive hasta la carpeta contenedora del DataSet.\n","%cd '/kaggle/input/intel-image-classification'"]},{"cell_type":"markdown","metadata":{"id":"TXfsE3XXRDWF"},"source":["# **Definición de Rutas**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GgHxhvsxWEtR"},"outputs":[],"source":["# Definimos las rutas donde se alojan los datos.\n","train      = 'seg_train/seg_train/'\n","validation = 'seg_test/seg_test/'\n","test       = 'seg_pred/'"]},{"cell_type":"markdown","metadata":{"id":"gcUr8MIrczT_"},"source":["# **Definición del Generador de Datos**"]},{"cell_type":"markdown","metadata":{"id":"417qjXAqRLpV"},"source":["## **Preparación de imágenes para entrenamiento, validación y prueba**"]},{"cell_type":"markdown","metadata":{"id":"uCeE53YSRlyb"},"source":["Con la importación de la clase 'ImageDataGenerator' de Keras, se generan lotes de datos de imágenes con aumentos y transformaciones en tiempo real.\n","\n"," **Creación de *instancias* de ImageDataGenerator:**\n","\n"," Se crean tres instancias para los conjuntos de datos: *entrenamiento, validación y prueba*. El argumento rescale=1./255 normaliza los valores de los píxeles de las imágenes al rango [0, 1] (originalmente los valores de los píxeles están en el rango [0, 255]).\n","\n","\n","**Configuración del generador de datos de entrenamiento:**\n","\n","*train:* Directorio donde se encuentran las imágenes de entrenamiento.\n","\n","*batch_size=32*: Las imágenes se procesan en lotes de 32.\n","\n","*target_size=(150, 150):* Las imágenes se redimensionan a 150x150 píxeles.\n","\n","*class_mode='categorical'*: Se asume que las etiquetas de las imágenes son categóricas (más de dos clases).\n","\n","\n","**Configuración del generador de datos de validación:**\n","\n","*validation:* Directorio donde se encuentran las imágenes de validación.\n","\n","*batch_size=32:* Las imágenes se procesan en lotes de 32.\n","\n","*shuffle=False:* Las imágenes no se mezclan, lo cual es útil para mantener un orden predecible durante la evaluación.\n","\n","*target_size=(150, 150):* Las imágenes se redimensionan a 150x150 píxeles.\n","\n","*class_mode='categorical':* Se asume que las etiquetas de las imágenes son categóricas.\n","\n","**Configuración del generador de datos de prueba:**\n","\n","*test:* Directorio donde se encuentran las imágenes de prueba.\n","\n","*target_size=(150,150):* Las imágenes se redimensionan a 150x150 píxeles.\n","\n","*batch_size=1:* Las imágenes se procesan una a una, lo cual puede ser útil para la evaluación precisa de cada imagen de prueba.\n","\n","Así, en el siguiente script se prepara los datos de imágenes para el modelo de red neuronal, asegurando que todas las imágenes tengan el mismo tamaño y estén normalizadas, lo que es crucial para un entrenamiento eficaz del modelo.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1186,"status":"ok","timestamp":1717467104186,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"},"user_tz":180},"id":"MUODYc1uYrTB","outputId":"6ef4a1b5-5b1d-4510-b49d-159f06f9c17f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 14034 images belonging to 6 classes.\n","Found 3000 images belonging to 6 classes.\n","Found 7301 images belonging to 1 classes.\n"]}],"source":["# Utilizamos la libreria proporcionada por Keras para leer las imagenes del DataSet.\n","\n","train_datagen = ImageDataGenerator(rescale = 1./255)\n","\n","validation_datagen = ImageDataGenerator(rescale = 1./255)\n","\n","train_generator = train_datagen.flow_from_directory(train,\n","                                                   batch_size=32,\n","                                                   target_size = (150, 150),\n","                                                   class_mode='categorical')\n","\n","validation_generator = validation_datagen.flow_from_directory(validation,\n","                                                   batch_size=32,\n","                                                   shuffle=False,\n","                                                   target_size = (150, 150),\n","                                                   class_mode='categorical')\n","\n","\n","test_datagen = ImageDataGenerator(rescale = 1./255)\n","test_generator = test_datagen.flow_from_directory(test, target_size = (150, 150), batch_size = 1)"]},{"cell_type":"markdown","metadata":{"id":"dEHUm8XUWiZK"},"source":["## **Clases**"]},{"cell_type":"markdown","metadata":{"id":"_rtzVIF9XEFS"},"source":["**Nombres de las clases**\n","\n","*train_generator.class_indices:* Esta propiedad del objeto train_generator devuelve un diccionario que asigna nombres de clases a sus respectivos índices. Por ejemplo, {'buildings': 0, 'forest': 1 ......etc.}.\n","\n","Se imprime el diccionario de nombres de clases y sus índices, lo cual es útil para verificar que las clases han sido correctamente identificadas y asignadas.\n","\n","*list(class_names.keys()):* convierte las claves del diccionario class_names (que son los nombres de las clases) en una lista.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":338,"status":"ok","timestamp":1717467112897,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"},"user_tz":180},"id":"5y-i6yRKZOJv","outputId":"f8c5f824-49cf-421a-91ff-892c94b3281e"},"outputs":[{"name":"stdout","output_type":"stream","text":["{'buildings': 0, 'forest': 1, 'glacier': 2, 'mountain': 3, 'sea': 4, 'street': 5}\n"]}],"source":["# Obtenemos los nombres de las clases.\n","class_names = train_generator.class_indices\n","print(class_names)\n","label=list(class_names.keys())"]},{"cell_type":"markdown","metadata":{"id":"j6vlAxh4dK5I"},"source":["# **Visualización de los Datos**"]},{"cell_type":"markdown","metadata":{"id":"MxPDN8ElYFIO"},"source":["## **Iteración sobre el generador de datos de entrenamiento**"]},{"cell_type":"markdown","metadata":{"id":"RDdSt1jVZQy-"},"source":["Utilizando las bibliotecas *matplotlib.pyplot* y *numpy*\n","\n","Se un bucle que itera sobre los lotes de datos generados por *train_generator*. En cada iteración, *img_batch* contiene un lote de imágenes y *label_batch* contiene el correspondiente lote de etiquetas.\n","\n","Se imprime la forma del lote de imágenes. Por ejemplo, si *batch_size=32* y las imágenes se redimensionan a 150x150 píxeles con 3 canales de color (RGB), la forma será (32, 150, 150, 3).\n","\n","Se crea una nueva figura de Matplotlib con un tamaño especificado de 20x10 pulgadas, que será utilizada para mostrar las imágenes del lote.\n","\n","Se construye un bucle que itera sobre las 32 imágenes en el lote.\n","\n","*sub = plt.subplot(4, 8, ix + 1):* Crea un subgráfico en la figura con una cuadrícula de 4 filas y 8 columnas. ix + 1 indica la posición del subgráfico.\n","\n","*plt.imshow(img_batch[ix]):* Muestra la imagen ix del lote.\n","\n","*plt.xticks([])* y *plt.yticks([]):* Elimina las marcas de los ejes x e y para que la visualización sea más clara.\n","\n","*plt.xlabel(label[np.argmax(label_batch[ix])]):* Muestra el nombre de la clase como la etiqueta del eje x. *np.argmax(label_batch[ix])* obtiene el índice de la clase con la mayor probabilidad para la imagen ix, y label se usa para obtener el nombre de la clase correspondiente.\n","\n","De este modo, se puede visualizar un lote de imágenes junto con sus etiquetas, asegurando que el generador de datos funciona correctamente y que las imágenes están etiquetadas de manera adecuada; y, se puede verificar visualmente que las imágenes han sido correctamente preprocesadas (redimensionadas y normalizadas).\n","\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":629,"output_embedded_package_id":"1k8FB-nffu1I1fd9TH9NDOM7I4mmmKOCU"},"executionInfo":{"elapsed":5239,"status":"ok","timestamp":1717467125486,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"},"user_tz":180},"id":"sOhcAoWrZTi_","outputId":"48e3c631-cad6-4156-e2f7-c9056015bd02"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["# Imprimimos algunas imagenes que se utilizarán en el entrenamiento con su respectivo rótuolo.\n","for img_batch,label_batch in train_generator:\n","    print(img_batch.shape)\n","    plt.figure(figsize=(20,10))\n","    for ix in range(32):\n","        sub = plt.subplot(4, 8, ix + 1)\n","        plt.imshow(img_batch[ix])\n","        plt.xticks([])\n","        plt.yticks([])\n","        plt.xlabel(label[np.argmax(label_batch[ix])])\n","    break"]},{"cell_type":"markdown","metadata":{"id":"IkrM3fnpcQR4"},"source":["# **Creación del Modelo**"]},{"cell_type":"markdown","metadata":{"id":"irLaiVhoepSV"},"source":["## **Definición de la función *build_model***\n","\n","Esta función acepta un parámetro input_shape con un valor predeterminado de (150, 150, 3), que representa el tamaño de entrada de las imágenes (150x150 píxeles y 3 canales de color RGB).\n","\n","## **Inicialización del Modelo Secuencial**\n","\n","Se crea una instancia del modelo secuencial de Keras, lo que permite agregar capas de la red neuronal de manera lineal.\n","\n","* *Primer capa convulcional:* Agrega una capa convolucional con 64 filtros, un tamaño de kernel de 3x3, un paso (stride) de 2x2, relleno (padding) 'same' para conservar el tamaño de la entrada, y la función de activación ReLU. Esta capa también especifica el tamaño de entrada input_shape.\n","\n","* *Segunda capa convulcional:* Agrega una segunda capa convolucional con 128 filtros y las mismas configuraciones de kernel, stride, padding y activación que la primera capa, excepto el input_shape.\n","\n","* *Capa de Max Pooling:* Agrega una capa de max pooling con tamaño de pool predeterminado (2x2), que reduce la dimensión espacial de la salida de la capa convolucional anterior.\n","\n","* *Tercer capa convulcional:* Agrega una tercera capa convolucional con 256 filtros y las mismas configuraciones de kernel, stride, padding y activación.\n","\n","* *Cuarta capa convulsional:* Agrega una cuarta capa convolucional con 512 filtros y las mismas configuraciones de kernel, stride, padding y activación.\n","\n","* *Otra capa de Max Pooling:* Agrega otra capa de max pooling para reducir nuevamente la dimensión espacial de la salida.\n","\n","* *Aplanar la salida:* Aplana la salida tridimensional de la última capa convolucional en un vector unidimensional para poder conectarla a las capas completamente conectadas (densas).\n","\n","* *Primer capa densa:* Agrega una capa de dropout con una tasa del 20% para prevenir el sobreajuste, y una capa densa con 1048 neuronas y la función de activación ReLU.\n","\n","* *Segunda capa densa:* Agrega otra capa de dropout con una tasa del 20%, y una capa densa con tantas neuronas como clases en class_names, utilizando la función de activación softmax para obtener probabilidades de pertenencia a cada clase.\n","\n","* *Compilación del modelo:* usando el optimizador Adam, la función de pérdida de entropía cruzada categórica (adecuada para clasificación multiclase) y la métrica de precisión para evaluar el rendimiento del modelo.\n","\n","* *Devolución del modelo construido y compilado*\n","\n","En este script se define una función para construir y compilar una red neuronal convolucional (CNN) con varias capas convolucionales, de pooling, aplanamiento, dropout y densas. El modelo está diseñado para aceptar imágenes de tamaño 150x150 con 3 canales de color y clasificar imágenes en tantas categorías como clases haya en class_names.\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GaFfKDsNZoLf"},"outputs":[],"source":["# Definimos el método que creará la arquitectura de la red neuronal.\n","def build_model(input_shape = (150, 150, 3)):\n","    Model = Sequential()\n","    Model.add(Conv2D(64, kernel_size = (3, 3), strides = (2, 2), padding = 'same', activation = 'relu', input_shape = input_shape))\n","    Model.add(Conv2D(128, kernel_size = (3, 3), strides = (2, 2), padding = 'same', activation = 'relu'))\n","    Model.add(MaxPool2D())\n","    Model.add(Conv2D(256, kernel_size = (3, 3), strides = (2, 2), padding = 'same', activation = 'relu'))\n","    Model.add(Conv2D(512, kernel_size = (3, 3), strides = (2, 2), padding = 'same', activation = 'relu'))\n","    Model.add(MaxPool2D())\n","    Model.add(Flatten())\n","    Model.add(Dropout(0.2))\n","    Model.add(Dense(1048, activation = 'relu'))\n","    Model.add(Dropout(0.2))\n","    Model.add(Dense(len(class_names), activation = 'softmax'))\n","\n","    Model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\n","\n","    return Model"]},{"cell_type":"markdown","metadata":{"id":"FYH6IGk2ddrr"},"source":["# **Entrenamiento del Modelo**"]},{"cell_type":"markdown","metadata":{"id":"Nbngzh34iVOi"},"source":["## **Creación de la red neuronal para ser entrenada**\n","\n","Se llama a la función *build_model*, y ésta devuelve un modelo de red neuronal convolucional (CNN) ya compilado con la arquitectura definida anteriormente.\n","\n","*model.summary():* imprime un resumen detallado de la arquitectura del modelo en la consola y proporciona información sobre cada capa del modelo, incluyendo el tipo de capa, la forma de la salida de cada capa, y el número de parámetros que se pueden entrenar (weights).\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":642,"status":"ok","timestamp":1717467140744,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"},"user_tz":180},"id":"AV0bdlogZysZ","outputId":"f343b06f-072d-4d60-fd92-c1972d5e088e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 75, 75, 64)        1792      \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 38, 38, 128)       73856     \n","                                                                 \n"," max_pooling2d (MaxPooling2  (None, 19, 19, 128)       0         \n"," D)                                                              \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 10, 10, 256)       295168    \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 5, 5, 512)         1180160   \n","                                                                 \n"," max_pooling2d_1 (MaxPoolin  (None, 2, 2, 512)         0         \n"," g2D)                                                            \n","                                                                 \n"," flatten (Flatten)           (None, 2048)              0         \n","                                                                 \n"," dropout (Dropout)           (None, 2048)              0         \n","                                                                 \n"," dense (Dense)               (None, 1048)              2147352   \n","                                                                 \n"," dropout_1 (Dropout)         (None, 1048)              0         \n","                                                                 \n"," dense_1 (Dense)             (None, 6)                 6294      \n","                                                                 \n","=================================================================\n","Total params: 3704622 (14.13 MB)\n","Trainable params: 3704622 (14.13 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}],"source":["# Creamos la red neuronal para que se entrene utilizando el TPU.\n","model = build_model()\n","model.summary()"]},{"cell_type":"markdown","metadata":{"id":"6t87SrSZkiYv"},"source":["# **Entrenamiento del modelo**"]},{"cell_type":"markdown","metadata":{"id":"OboCYhFtkmMa"},"source":["Se entrena el modelo CNN utilizando el generador de datos de entrenamiento *train_generator* durante 30 epochs (iterations over the entire dataset).\n","\n","*shuffle=True* asegura que los datos se mezclen aleatoriamente en cada epoch, lo que ayuda a generalizar mejor y evita que el modelo aprenda patrones específicos del orden de los datos.\n","\n","*validation_data = validation_generator* especifica el generador de datos de validación que se utilizará para evaluar el modelo después de cada epoch de entrenamiento. Esto permite monitorear la performance del modelo en datos no vistos durante el entrenamiento.\n","\n","*hist* almacena el historial del entrenamiento, que incluye información sobre la pérdida y la precisión del modelo en cada epoch tanto para los datos de entrenamiento como de validación. Esto puede ser útil para la visualización y el análisis posterior del rendimiento del modelo."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"IWTt_VfnZ55l","outputId":"2b66b542-5275-4a5a-d7a4-a789c2381697"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/30\n","439/439 [==============================] - 486s 1s/step - loss: 0.9954 - accuracy: 0.5950 - val_loss: 0.7793 - val_accuracy: 0.6823\n","Epoch 2/30\n","439/439 [==============================] - 495s 1s/step - loss: 0.6855 - accuracy: 0.7480 - val_loss: 0.6350 - val_accuracy: 0.7583\n","Epoch 3/30\n","439/439 [==============================] - 477s 1s/step - loss: 0.5333 - accuracy: 0.8090 - val_loss: 0.5215 - val_accuracy: 0.8080\n","Epoch 4/30\n","439/439 [==============================] - 482s 1s/step - loss: 0.4447 - accuracy: 0.8427 - val_loss: 0.4878 - val_accuracy: 0.8240\n","Epoch 5/30\n","439/439 [==============================] - 472s 1s/step - loss: 0.3552 - accuracy: 0.8744 - val_loss: 0.4725 - val_accuracy: 0.8320\n","Epoch 6/30\n","439/439 [==============================] - 473s 1s/step - loss: 0.2900 - accuracy: 0.8944 - val_loss: 0.4861 - val_accuracy: 0.8363\n","Epoch 7/30\n","439/439 [==============================] - 468s 1s/step - loss: 0.2240 - accuracy: 0.9197 - val_loss: 0.5342 - val_accuracy: 0.8277\n","Epoch 8/30\n","213/439 [=============>................] - ETA: 3:49 - loss: 0.1702 - accuracy: 0.9375"]}],"source":["# Entrenamos el modelo.\n","hist = model.fit_generator(train_generator, epochs = 30, shuffle=True, validation_data = validation_generator)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Oe-Jl83maMrd"},"outputs":[],"source":["# Guardamos los parametros del modelo para futuras pruebas.\n","model.save_weights('/kaggle/working/model_weights_cnn.h5')"]},{"cell_type":"markdown","metadata":{"id":"FD1yqF3Ymttk"},"source":["# **Evaluación del Modelo**"]},{"cell_type":"markdown","metadata":{"id":"SRBN8-mLmyfz"},"source":["## **Evaluación del desempeño durante el entrenamiento**\n","\n","Se generan y visualizan las gráficas históricas de la pérdida y la precisión (loss - accuracy). Estas gráficas son esenciales para entender si el modelo está aprendiendo correctamente o si está experimentando problemas como el sobreajuste.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":408},"executionInfo":{"elapsed":985,"status":"ok","timestamp":1717366724967,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"},"user_tz":180},"id":"vwyByWzLaQ8h","outputId":"45268363-c211-4a5b-f2b4-3790dfe48400"},"outputs":[{"data":{"text/plain":["<matplotlib.legend.Legend at 0x7b2020512410>"]},"execution_count":13,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 1000x400 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Observamos la grafica historica de la perdida y el nivel de predicción.\n","plt.figure(figsize = (10, 4))\n","plt.plot(hist.history['loss'], label = 'train_loss')\n","plt.plot(hist.history['accuracy'], label = 'train_accuracy')\n","plt.title('training plots')\n","plt.legend()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5kHXyj1daw7n"},"outputs":[],"source":["# Cargamos los parametros de las neuronas.\n","#model.load_weights('model_weights.h5')"]},{"cell_type":"markdown","metadata":{"id":"FpNn-x0onrY3"},"source":["## **Evaluación en el conjunto de prueba**\n","\n","Se evalúa el modelo utilizando el conjunto de datos de prueba. Proporcionando métricas de desempeño (loss y accuracy) en datos que el modelo no ha visto durante el entrenamiento, lo que es crucial para entender su capacidad de generalización.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3017,"status":"ok","timestamp":1717366732465,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"},"user_tz":180},"id":"ptlPWVp5a4YZ","outputId":"4b13bb81-37ac-4530-a1a0-3d65b326121e"},"outputs":[{"name":"stdout","output_type":"stream","text":["94/94 [==============================] - 3s 29ms/step - loss: 1.1895 - accuracy: 0.8113\n"]}],"source":["#loss, accuracy = model.evaluate(test_generator)\n","\n","error = model.evaluate(validation_generator)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PmXG121_a90j"},"outputs":[],"source":["# Preparamos los datos para graficarlos en una matriz de confusión.\n","predictions = model.predict_generator(validation_generator)\n","predicted_classes = np.argmax(predictions, axis=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"elapsed":1086,"status":"ok","timestamp":1717366743349,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"},"user_tz":180},"id":"CVoDn3nubCyX","outputId":"e0341a53-e413-4401-aea4-6ab8a05b7294"},"outputs":[{"data":{"image/png":"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\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Graficamos la matriz de confusión.\n","CM = confusion_matrix(validation_generator.classes,predicted_classes)\n","ax = plt.axes()\n","sn.heatmap(CM, annot=True,\n","           annot_kws={\"size\": 10},\n","           fmt=\"d\",#mostrar números de manera no exponencial.\n","           xticklabels=class_names,\n","           yticklabels=class_names,\n","           linewidths=.5,\n","           ax = ax)\n","ax.set_title('Confusion matrix')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Mns71vGwo3VA"},"source":["## **Puesta a Prueba del modelo**\n","\n","Se configura la visualización de imágenes, se definene filas y columnas para la cuadrícula de subplots para mostrar 32 imágenes (4x8).\n","\n","Se itera sobre los lotes de imágenes del generador de prueba.\n","\n","Se muestran las imágenes.\n","\n","Se hace una predicción para las imágenes: *model.predict(img_batch)* genera una predicción para la imagen.\n","*np.argmax(pred)* obtiene el índice de la clase con la mayor probabilidad.\n","*np.max(pred) * 100* calcula la probabilidad máxima y la convierte en un porcentaje.\n","\n","Se etiqueta en el eje *y* con la probabilidad de la predicción y en el eje *x* con el nombre de la clase predicha.\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"h-wD2LuNbLt-"},"outputs":[],"source":["# Ponemos a prueba el modelo con los datos para testear.\n","index = 1\n","plt.figure(figsize=(20,10))\n","row = 4\n","col = 8\n","for img_batch,_ in test_generator:\n","    sub = plt.subplot(row, col, index)\n","    plt.imshow(img_batch[0])\n","    plt.xticks([])\n","    plt.yticks([])\n","    pred = model.predict(img_batch)\n","    class_key = np.argmax(pred)\n","    prob = np.max(pred) * 100\n","    plt.ylabel('{:.2f}%'.format(prob))\n","    plt.xlabel(label[np.argmax(pred)])\n","    index = index + 1\n","    if index > row * col:\n","        break"]},{"cell_type":"markdown","metadata":{"id":"BpWF1eXKriNX"},"source":["## **Devolución de predicción por Voz**"]},{"cell_type":"markdown","metadata":{"id":"bITmcGktsqYW"},"source":["*model.predict(img_batch)* genera una predicción para la imagen img_batch. Esto dará un vector de probabilidades para cada clase.\n","\n","*np.argmax(pred)* obtenie el índice de la clase con la mayor probabilidad en el vector de predicciones pred. Este índice corresponde a la clase predicha por el modelo.\n","\n","*np.max(pred) * 100* calcula la probabilidad máxima entre todas las clases predichas y la convierte en un porcentaje, proporcionando la confianza del modelo en su predicción.\n","\n","Así se generar un mensaje de voz que anuncia la clase predicha y su probabilidad asociada proporcionando una retroalimentación auditiva sobre las predicciones del modelo. Pensado para futuras aplicaciones de asistencia o accesibilidad."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6698,"status":"ok","timestamp":1717366778200,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"},"user_tz":180},"id":"2c5wkbPmYZ67","outputId":"521a542e-d156-445e-8145-958d39410361"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting gTTS\n","  Downloading gTTS-2.5.1-py3-none-any.whl (29 kB)\n","Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.10/dist-packages (from gTTS) (2.31.0)\n","Requirement already satisfied: click<8.2,>=7.1 in /usr/local/lib/python3.10/dist-packages (from gTTS) (8.1.7)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->gTTS) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->gTTS) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->gTTS) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.27->gTTS) (2024.2.2)\n","Installing collected packages: gTTS\n","Successfully installed gTTS-2.5.1\n"]}],"source":["#Instalamos e importamos la librería necesaria\n","!pip install gTTS\n","from gtts import gTTS\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":308,"status":"ok","timestamp":1717367506209,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"},"user_tz":180},"id":"axqoYdItY0kS","outputId":"d3cb3625-634a-44e4-a0e7-c8b65aa63a6e"},"outputs":[{"name":"stdout","output_type":"stream","text":["1/1 [==============================] - 0s 26ms/step\n"]}],"source":["# Clasificación de la imagen\n","pred = model.predict(img_batch)\n","class_key = np.argmax(pred)\n","prob = np.max(pred) * 100\n","class_name = label[class_key]\n","\n","# Generación del texto a hablar\n","text_to_speak = f'La imagen ha sido clasificada como {class_name} con una probabilidad del {prob:.2f}%.'\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8uB1WsRZYkFi"},"outputs":[],"source":["# Generación del archivo de audio\n","tts = gTTS(text=text_to_speak, lang='es')  # 'es' para español\n","tts.save('/kaggle/working/result_audio.mp3')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1717367530351,"user":{"displayName":"Viviana Farabollini","userId":"17648384242142966058"},"user_tz":180},"id":"kwBwK-W2Ymdq","outputId":"6fe10f43-6c29-42ed-d377-f9e96ea73b1d"},"outputs":[{"data":{"text/html":["\n","                <audio  controls=\"controls\" autoplay=\"autoplay\">\n","                    <source src=\"data:audio/mpeg;base64,\" type=\"audio/mpeg\" />\n","                    Your browser does not support the audio element.\n","                </audio>\n","              "],"text/plain":["<IPython.lib.display.Audio object>"]},"execution_count":26,"metadata":{},"output_type":"execute_result"}],"source":["from IPython.display import Audio\n","\n","# Reproducción del audio\n","Audio(\"/kaggle/working/result_audio.mp3\", autoplay=True)\n"]},{"cell_type":"markdown","metadata":{"id":"0hHxN9reSfic"},"source":["# **CARGA DE POSIBLES IMÁGENES DE USUARIOS Y SUGERENCIA POR VOZ**"]},{"cell_type":"markdown","metadata":{"id":"E4O5MpH0Tlpz"},"source":["Después de definir y correr el modelo de clasificación y predicción presentamos un script que supone cómo podría utilizarse el mismo para realizar sugerencias de visitas turísticas a usuarios que carguen una o varias imágenes de su interés.\n","\n","Para ello:\n","\n","* Definimos un diccionario *'info_categorias'* que contiene información sobre diferentes categorías de imágenes.\n","* Definimos la función *'predict_image_from_url'* para cargar una imagen desde una URL, preprocesarla y hacer una predicción utilizando un modelo preentrenado.\n","* Definimos las categorías (*class_names*) y se proporcionan las URLs de las imágenes a clasificar.\n","* Iteramos sobre cada URL de imagen en la lista img_urls. Podríamos sólo solicitar una URL al usuario. Creamos una lista para evaluar las sugerencias que se realizan. Para cada imagen, se realiza una predicción utilizando la *función predict_image_from_url*.\n","* Si la predicción es exitosa, se obtiene la clase predicha y se genera un texto basado en la información de la categoría.\n","* Utilizamos la biblioteca gTTS para convertir el texto en voz en español.\n","* Se muestra la imagen original junto con la predicción y se reproduce el audio con la respuesta por voz. Se espera un tiempo para que el audio termine antes de continuar con la siguiente imagen.\n"]},{"cell_type":"code","source":["# Clasificación de la imagen y respuesta por voz\n","\n","from gtts import gTTS\n","from IPython.display import Audio, display\n","import requests\n","from PIL import Image, UnidentifiedImageError\n","from io import BytesIO\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import time\n","\n","# Diccionario con información sobre cada categoría\n","info_categorias = {\n","    \"buildings\": \"te sugiero visitar Buenos Aires, con su arquitectura impresionante y sitios históricos como el Teatro Colón y el Obelisco.\",\n","    \"forest\": \"te recomiendo los Parques Nacionales de la Patagonia, como el Parque Nacional Los Alerces, conocido por sus frondosos bosques.\",\n","    \"glacier\": \"El mejor lugar es el Parque Nacional Los Glaciares en la Patagonia, donde puedes ver el impresionante Glaciar Perito Moreno.\",\n","    \"mountain\": \"No puedes perderte el Aconcagua en Mendoza, la montaña más alta de América.\",\n","    \"sea\": \"Visita Mar del Plata o la Península Valdés, donde puedes disfrutar de playas y avistamiento de ballenas.\",\n","    \"street\": \"Para calles pintorescas, pasea por el barrio de San Telmo en Buenos Aires, con sus calles empedradas y mercados de antigüedades.\"\n","}\n","\n","# Función para cargar una imagen desde una URL y predecir su clase\n","def predict_image_from_url(model, img_url, class_names):\n","    try:\n","        response = requests.get(img_url)\n","        response.raise_for_status()  # Verificar si la solicitud fue exitosa\n","\n","        img = Image.open(BytesIO(response.content))\n","\n","        # Mantener una copia de la imagen original\n","        img_original = img.copy()\n","\n","        # Redimensionar la imagen a 150x150 para el modelo\n","        img = img.resize((150, 150))\n","        img_array = np.array(img) / 255.0\n","        img_array = np.expand_dims(img_array, axis=0)\n","\n","        prediction = model.predict(img_array)\n","        predicted_class = np.argmax(prediction)\n","        return predicted_class, prediction[0][predicted_class], img_original\n","\n","    except (requests.exceptions.RequestException, UnidentifiedImageError) as e:\n","        print(f\"Error al procesar la imagen desde la URL {img_url}: {e}\")\n","        return None, None, None\n","\n","class_names = [\"buildings\", \"forest\", \"glacier\", \"mountain\", \"sea\", \"street\"]\n","\n","# URL de la imagen que el usuario quiere clasificar\n","img_url = \"https://www.shutterstock.com/image-photo/beautiful-view-sea-on-atlantic-600nw-253604740.jpg\"\n","\n","# Realizar la predicción\n","predicted_class, confidence, img = predict_image_from_url(model, img_url, class_names)\n","\n","if predicted_class is not None:\n","    class_name = class_names[predicted_class]\n","\n","    # Obtener la información de la categoría predicha\n","    info_categoria_predicha = info_categorias[class_name]\n","\n","    # Generar el texto a hablar con la información de la categoría predicha\n","    text_to_speak = f'Sugerencia turística: {info_categoria_predicha}.'\n","\n","    # Generar el archivo de audio\n","    tts = gTTS(text=text_to_speak, lang='es')  # 'es' para español\n","    ruta_audio_respuesta = '/kaggle/working/result_audio.mp3'\n","    tts.save(ruta_audio_respuesta)\n","\n","    # Reproducir el archivo de audio\n","    audio = Audio(ruta_audio_respuesta, autoplay=True)\n","    display(audio)\n","\n","    # Mostrar la imagen original y la predicción con proporciones correctas\n","    plt.imshow(img)\n","    plt.title(f\"Predicción: {class_name} - Confianza: {confidence * 100:.2f}%\")\n","    plt.axis('off')\n","    plt.show()\n","\n","    # Esperar a que termine el audio antes de continuar\n","    duration = len(text_to_speak.split()) / 2  # Aproximación de la duración del audio en segundos\n","    time.sleep(duration + 1)  # Esperar un poco más para asegurarse de que el audio termine\n","else:\n","    print(f\"No se pudo procesar la imagen desde la URL {img_url}.\")\n"],"metadata":{"id":"pfgy2iBscEam"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vrN8SgbD0pkk"},"outputs":[],"source":["# Clasificación de la imagen y respuesta por voz\n","\n","# Función para cargar una lista de URLs de imágenes y predecir su clase\n","\n","\n","# Lista de URLs de las imágenes que el usuario quiere clasificar\n","img_urls = [\n","    \"https://www.shutterstock.com/image-photo/beautiful-view-sea-on-atlantic-600nw-253604740.jpg\",\n","    \"https://media.tacdn.com/media/attractions-splice-spp-674x446/07/1a/70/bf.jpg\",\n","    \"https://media.tacdn.com/media/attractions-splice-spp-674x446/06/e4/dd/04.jpg\",\n","    \"https://assets.turismocity.com/cdn-cgi/image/format=auto,width=500,fit=scale-down/playas%20arg%20-%20punta%20perdices.jpg\",\n","    \"https://www.verbuenosaires.com/wp-content/uploads/2019/05/San-Telmo-buenos-aires.jpg\",\n","    \"https://101lugaresincreibles.com/wp-content/uploads/2016/05/hornocal-jujuy-2-e1463151261703.jpg\",\n","    \"https://fotografias.lasexta.com/clipping/cmsimages02/2019/03/05/417B5470-7EA5-4440-B015-1A0E8C30F6B9/69.jpg?crop=960,540,x0,y89&width=1280&height=720&optimize=low&format=jpg\",\n","    \"https://www.shutterstock.com/image-photo/street-intersection-buildings-buenos-aires-600nw-1940554291.jpg\",\n","    \"https://hips.hearstapps.com/hmg-prod/images/centro-cultural-kirchner-buenos-aires-1560761469.jpg\",\n","    \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT8sFj9UZxNRm3wq1M-cOybxCpVPbm7KlahQA&s\",\n","    \"https://st1.uvnimg.com/dims4/default/1d90d8b/2147483647/thumbnail/1024x576%3E/quality/75/?url=https%3A%2F%2Fuvn-brightspot.s3.amazonaws.com%2Fassets%2Fvixes%2F6%2F6-pueblos-argentinos-escondidos-entre-montanas-3.jpg\"\n","]\n","\n","#Iteramos por las lista para automatizar las predicciones de las imágenes cargadas\n","\n","for img_url in img_urls:\n","    # Realizar la predicción\n","    predicted_class, confidence, img = predict_image_from_url(model, img_url, class_names)\n","\n","    if predicted_class is not None:\n","        class_name = class_names[predicted_class]\n","\n","        # Obtener la información de la categoría predicha\n","        info_categoria_predicha = info_categorias[class_name]\n","\n","        # Generar el texto a hablar con la información de la categoría predicha\n","        text_to_speak = f'Sugerencia turística: {info_categoria_predicha}.'\n","\n","        # Generar el archivo de audio\n","        tts = gTTS(text=text_to_speak, lang='es')  # 'es' para español\n","        ruta_audio_respuesta = '/kaggle/working/result_audio.mp3'\n","        tts.save(ruta_audio_respuesta)\n","\n","        # Reproducir el archivo de audio\n","        audio = Audio(ruta_audio_respuesta, autoplay=True)\n","        display(audio)\n","\n","        # Mostrar la imagen original y la predicción con proporciones correctas\n","        plt.imshow(img)\n","        plt.title(f\"Predicción: {class_name} - Confianza: {confidence * 100:.2f}%\")\n","        plt.axis('off')\n","        plt.show()\n","\n","        # Esperar a que termine el audio antes de continuar\n","        duration = len(text_to_speak.split()) / 2  # Aproximación de la duración del audio en segundos\n","        time.sleep(duration + 1)  # Esperar un poco más para asegurarse de que el audio termine\n","    else:\n","        print(f\"No se pudo procesar la imagen desde la URL {img_url}.\")\n"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/notebook9fb2c2d731-eb3afd85-4561-4c1b-8e6a-ba5c9085044c.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240602/auto/storage/goog4_request&X-Goog-Date=20240602T202631Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=25f4ab10d63714aa65324e1e882748f82cf9364f89296d7ae2364e411942faf9e3cfebd540c901fcdb01d689f6a54b6449a26c3dc2ba89698413c915bc0223c1cc1aa37807a12e6076f393e97c40b9cff16fc1dfdaee5d2a094a15763dce9217c0124611861805f5f13f95a1bf02a9fb3fba88d603849dd1f42e87846b66d52253da0633b6cff1167077acdbd7e002baa3a61a653c685e9f9884108a00bd5b27189068c2566821125d3c78ee13ef2aaa2041b33ea1494c2e6dfa1e21ace11b66e58b5cb925a1242218936db18f0ad3f6edbb1b8c7484a35cec03ee4e4c980f450effadc2ede8aa1a890ea817cee3a6bd9c8d6f6bbc051e3f456bf96f2a8fa07e","timestamp":1717363885291},{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/notebook9fb2c2d731-b26af7bf-e8d7-4825-a680-af3fad861324.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240508/auto/storage/goog4_request&X-Goog-Date=20240508T221517Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=905a1ad44753d1e3785ebf0049f1295cceca5123d69e3e91232a1b1564a4f349b969801d8b49c326b7e2536331014cab6719ff472c5f7d9680b55f7bc67c30032aa785e5af90a49856c836e9cb07f19fd005a31d94b38d398c4aa85f22f6b64e30f6f73c64e06583d18088bf26870ed0ce386dcfc5db201af916f00e4f44e72ecf5cc3b45b9d335be28de06c6597b741aaebd645c2af0e203d15c4cc08b3d1f31c9cdc01038d1096b10ba4421edcdb737b0a8d4cc5b907a54ddfcfe066494fb5ed3976d6cdd711fb2750c7be42e10da096628f21e37ce527fc6a6c61c9d47603a8e7c0f9c84821b3fda040ebe9e77b951b81f1450a2f7f4691e3529f4e744e0f","timestamp":1715208670720},{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/notebookd612d5e298-89b0d249-d53b-4445-9e8f-7c2c51d97208.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240503/auto/storage/goog4_request&X-Goog-Date=20240503T001326Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=74fbc6f2674dab00f66444cb9cbd3dc8e0b3aca71315419b67b46b93b402c3b1fe21f979d803ea239fcacdca8033eb72717286eec7252cf5d61b5b4f3d12caaa2cb915573f6cf28433b334b1d6a47c9a8414f9652358b775472baf67a85d72d41751fe75a99b74f5f63b18d0aa0ace650f38420c8b6c574f50ecaf62564a8c55c78843e20e9df6f0a87ee8211f6188bbc67b45c89f91788f548799237b786a05f3bc411e4e5f570bb89c7ac919b76ce8e551b6eb8875084090b05b506b11d29bc116cf9b0e5ce061a20cd24bf25cb93c34ba384b48089ccd578947c7836b7193b4572d886c2e10da65e19be841a892b76b5518aeb371c92961856e4e424e2ed3","timestamp":1714705850123}]},"kaggle":{"accelerator":"none","dataSources":[{"datasetId":111880,"sourceId":269359,"sourceType":"datasetVersion"}],"dockerImageVersionId":30698,"isGpuEnabled":false,"isInternetEnabled":false,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"}},"nbformat":4,"nbformat_minor":0}